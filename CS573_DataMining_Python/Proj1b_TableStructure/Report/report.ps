%!PS-Adobe-3.0
%%Title: report.txt
%%For: Xue Yang
%%Creator: a2ps version 4.14
%%CreationDate: Tue Sep  3 08:40:04 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (1. PROGRAM OUTPUT \(txt file\)) p n
0 T () N
0 T (* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) N
0 T (                    weather1.csv/Table['0']) N
(5) # () N
0 T (        outlook,    -$humidity,         windy,         =play,  # notes ) N
0 T (#         sunny,         81.83,         FALSE,           yes,  # expected) N
0 T (#          0.36,         10.01,          0.57,          0.64,  # certainty) N
0 T (          sunny,            90,         FALSE,            no,  #       ) N
(10) # (          sunny,            90,          TRUE,            no,  #       ) N
0 T (       overcast,            86,         FALSE,           yes,  #       ) N
0 T (          rainy,            96,         FALSE,           yes,  #       ) N
0 T (          rainy,            80,         FALSE,           yes,  #       ) N
0 T (          rainy,             ?,          TRUE,            no,  #       ) N
(15) # (       overcast,            65,          TRUE,           yes,  #       ) N
0 T (          sunny,             ?,         FALSE,            no,  #       ) N
0 T (          sunny,            70,         FALSE,           yes,  #       ) N
0 T (          rainy,            80,         FALSE,           yes,  #       ) N
0 T (          sunny,            70,          TRUE,           yes,  #       ) N
(20) # (       overcast,            90,          TRUE,           yes,  #       ) N
0 T (       overcast,            75,         FALSE,           yes,  #       ) N
0 T (          rainy,            90,          TRUE,            no,  #       ) N
0 T () N
0 T (* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) N
(25) # (                    weather1.csv/Table['no']) N
0 T () N
0 T (        outlook,    -$humidity,         windy,         =play,  # notes ) N
0 T (#         sunny,         90.00,          TRUE,            no,  # expected) N
0 T (#          0.60,          0.00,          0.60,          1.00,  # certainty) N
(30) # (          sunny,            90,         FALSE,            no,  #       ) N
0 T (          sunny,            90,          TRUE,            no,  #       ) N
0 T (          rainy,             ?,          TRUE,            no,  #       ) N
0 T (          sunny,             ?,         FALSE,            no,  #       ) N
0 T (          rainy,            90,          TRUE,            no,  #       ) N
(35) # () N
0 T (* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ) N
0 T (                    weather1.csv/Table['yes']) N
0 T () N
0 T (        outlook,    -$humidity,         windy,         =play,  # notes ) N
(40) # (#      overcast,         79.11,         FALSE,           yes,  # expected) N
0 T (#          0.44,         10.22,          0.67,          1.00,  # certainty) N
0 T (       overcast,            86,         FALSE,           yes,  #       ) N
0 T (          rainy,            96,         FALSE,           yes,  #       ) N
0 T (          rainy,            80,         FALSE,           yes,  #       ) N
(45) # (       overcast,            65,          TRUE,           yes,  #       ) N
0 T (          sunny,            70,         FALSE,           yes,  #       ) N
0 T (          rainy,            80,         FALSE,           yes,  #       ) N
0 T (          sunny,            70,          TRUE,           yes,  #       ) N
0 T (       overcast,            90,          TRUE,           yes,  #       ) N
(50) # () N
0 T (2. SOURCE CODES) N
0 T (===============================================================================) N
0 T (File : <tablestr.py>) N
0 T () N
(55) # (import lib) N
0 T (class Table:) N
0 T (    def __init__\(self\):) N
0 T (        self.data = []     #data[[col1,...],[col2,...]]) N
0 T (        self.name = []     #name of i-th column) N
(60) # (        self.order = []    #order of the col) N
0 T (        self.nump = []     #is i-th column numeric?) N
0 T (        self.wordp = []    #is i-th column non-numeric?) N
0 T (        self.indep = []    #list of indep columns) N
0 T (        self.dep = []      #list of dep columns) N
(65) # (        self.less = []     #numeric goal to be minimized) N
0 T (        self.more = []     #numeric goal to be maximized) N
0 T (        self.klass = []    #non-numeric goal) N
0 T (        self.term = []     #non-numeric non-goal) N
0 T (        self.num = []      #numeric non-goal) N
(70) # (        # for all cols) N
0 T (        self.n = []        #count of things in this col) N
0 T (        # for wordp columns:) N
0 T (        self.count = []    #count of each word) N
(CS573:proj1b:Creating Tables_XUE YANG) (Page 1/5) (Sep 03, 13 8:40) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        self.mode = []     #most common word) p n
(75) # (        self.most = []     #count of most common word) N
0 T (        # for nump columns:) N
0 T (        self.hi = []       #upper bound) N
0 T (        self.lo = []       #lower bound) N
0 T (        self.mu = []       #mean) N
(80) # (        self.m2 = []       #sum of all nums) N
0 T (        self.sd = []       #standard deviation# -*- coding: utf-8 -*-) N
0 T (        # table printing format) N
0 T (        self.CONVFMT = '%06d') N
0 T (     ) N
(85) # (def centroid\(table\):) N
0 T (    "update the mode and most values for wordp type cols or update the mean and ) N
0 T (sd values for nump cols") N
0 T (    rows = [[],[]]) N
0 T (    for c in range\(len\(table.name\)\):) N
0 T (        s = table.mode[table.wordp.index\(c\)] if c in table.wordp else table.CONV) N
0 T (FMT%table.mu[table.nump.index\(c\)]) N
(90) # (        rows[0].append\(str\(s\)\)) N
0 T (        s = float\(table.most[table.wordp.index\(c\)]\)/table.n[c] if c in table.wor) N
0 T (dp else table.sd[table.nump.index\(c\)]) N
0 T (        rows[1].append\(str\(table.CONVFMT%s\)\)) N
0 T (    return rows) N
0 T (        ) N
(95) # (def tableprint\(table, stats=''\):) N
0 T (    "print table on the console") N
0 T (    print ' ') N
0 T (    if stats != '': table.CONVFMT = stats ) N
0 T (    print\(' ' + lib.rowprint\(table.name\)+ '  # notes'.ljust\(10\)\)) N
(100) # (    print\('#' + lib.rowprint\(centroid\(table\)[0]\) + '  # expected'.ljust\(10\)\)) N
0 T (    print\('#' + lib.rowprint\(centroid\(table\)[1]\) + '  # certainty'.ljust\(10\)\)   ) N
0 T ( ) N
0 T (    for j in range\(len\(table.data[0]\)\):) N
0 T (        line = []) N
0 T (        for i in range\(len\(table.data\)\):) N
(105) # (            line.append\(table.data[i][j]\)) N
0 T (        print\(' ' + lib.rowprint\(line\)+ '  #'.ljust\(10\)\)) N
0 T () N
0 T (def tableprint_txt\(table, f, tablename, stats=''\):) N
0 T (    "print table on the indicated txt file with table name") N
(110) # (    f.write\('\\n' +'* '*40+'\\n'+' '*20+tablename + '\\n'*2\)) N
0 T (    if stats != '': table.CONVFMT = stats ) N
0 T (    f.write\(' ' + lib.rowprint\(table.name\)+ '  # notes'.ljust\(10\) + '\\n'\)) N
0 T (    f.write\('#' + lib.rowprint\(centroid\(table\)[0]\) + '  # expected'.ljust\(10\) + ) N
0 T ('\\n'\)) N
0 T (    f.write\('#' + lib.rowprint\(centroid\(table\)[1]\) + '  # certainty'.ljust\(10\) +) N
0 T ( '\\n'\)    ) N
(115) # (    for j in range\(len\(table.data[0]\)\):) N
0 T (        line = []) N
0 T (        for i in range\(len\(table.data\)\):) N
0 T (            line.append\(table.data[i][j]\)) N
0 T (        f.write\(' ' + lib.rowprint\(line\)+ '  #'.ljust\(10\) + '\\n'\)) N
(120) # (===============================================================================) N
0 T (File : <reader.py>) N
0 T () N
0 T (import re) N
0 T (import tablestr) N
(125) # (def readcsv\(filename, table\):) N
0 T (    "read in data from csv and create a table") N
0 T (    FS = ','                     #define field separator) N
0 T (    f = open\(filename\)) N
0 T (    seen  = 0) N
(130) # (    while True:) N
0 T (        str = line\(f\)) N
0 T (        if str == -1:) N
0 T (            if seen == 0: print\("WARNING: empty or missing file"\)) N
0 T (            return -1) N
(135) # (        a = str.split\(FS\)        #compute the number of attributes in table) N
0 T (        if len\(a\) > 1:) N
0 T (            if seen: addRow\(a, table\)) N
0 T (            else: makeTable\(a, table\)) N
0 T (            seen += 1) N
(140) # (    ) N
(CS573:proj1b:Creating Tables_XUE YANG) (Page 2/5) (Sep 03, 13 8:40) title
border
grestore
(Printed by Xue Yang) rhead
(report.txt) (1/3) (Tuesday September 03, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (def line\(f\):) p n
0 T (    "get one line data \(without comments and whitespace\)") N
0 T (    str = f.readline\(\)) N
0 T (    if not str: return -1             #readline finds nothing, output error) N
(145) # (    else:) N
0 T (        str = "".join\(str.split\(\)\)    #kill whitespace) N
0 T (        str = re.sub\(r'#.*','',str\)   #kill comments    ) N
0 T (        if len\(str\) >= 1 and str[-1] == ',': return str + line\(f\)) N
0 T (        else: return str) N
(150) # (            ) N
0 T (def makeTable\(a, table\):) N
0 T (    "read table titles and set all corresponding parameters") N
0 T (    c = 0) N
0 T (    for ite in range\(len\(a\)\):) N
(155) # (        if a[ite][0] == '?': continue  #the col with '?' is ignored    ) N
0 T (        table.order.append\(ite\)) N
0 T (        x = a[ite]) N
0 T (        table.name.append\(x\)) N
0 T (        isNum = 1) N
(160) # (        if x.find\('='\) != -1:) N
0 T (            table.dep.append\(c\)) N
0 T (            table.klass.append\(c\)) N
0 T (            isNum = 0) N
0 T (        elif x.find\('+'\) != -1:           ) N
(165) # (            table.dep.append\(c\)) N
0 T (            table.more.append\(c\)) N
0 T (        elif x.find\('-'\) != -1:           ) N
0 T (            table.dep.append\(c\)) N
0 T (            table.less.append\(c\)) N
(170) # (        elif x.find\('$'\) != -1:           ) N
0 T (            table.indep.append\(c\)) N
0 T (            table.num.append\(c\)) N
0 T (        else:) N
0 T (            table.indep.append\(c\)) N
(175) # (            table.term.append\(c\)) N
0 T (            isNum = 0) N
0 T (        table.n.append\('0'\)) N
0 T (        if isNum:) N
0 T (            table.nump.append\(c\)) N
(180) # (            table.hi.append\(-1*10**32\)) N
0 T (            table.lo.append\(10**32\)) N
0 T (            table.mu.append\(0\)) N
0 T (            table.m2.append\(0\)) N
0 T (            table.sd.append\(0\)) N
(185) # (        else:) N
0 T (            table.wordp.append\(c\)) N
0 T (            table.most.append\(0\)) N
0 T (            table.count.append\({}\)) N
0 T (            table.mode.append\(''\)   ) N
(190) # (        c += 1 ) N
0 T (    for i in range\(c\): table.data.append\([]\)     ) N
0 T (    ) N
0 T (def addRow\(a, table\):) N
0 T (    "add a row of data to the table") N
(195) # (    for c in range\(len\(table.name\)\):) N
0 T (        f = table.order[c]) N
0 T (        x = a[f]) N
0 T (        table.data[c].append\(x\)) N
0 T (        if x.find\('?'\) == -1:) N
(200) # (            table.n[c] = int\(table.n[c]\) + 1) N
0 T (            if c in table.wordp:) N
0 T (                k = table.wordp.index\(c\)) N
0 T (                if table.count[k].has_key\(x\): table.count[k][x] += 1) N
0 T (                else: table.count[k][x] = 1) N
(205) # (                new = table.count[k][x] ) N
0 T (                if new > table.most[k]:) N
0 T (                    table.mode[k] = x) N
0 T (                    table.most[k] = new) N
0 T (            else:) N
(210) # (                k = table.nump.index\(c\)) N
0 T (                if float\(x\) > float\(table.hi[k]\): table.hi[k] = x) N
0 T (                if float\(x\) < float\(table.lo[k]\): table.lo[k] = x) N
0 T (                delta = float\(x\) - table.mu[k]) N
(CS573:proj1b:Creating Tables_XUE YANG) (Page 3/5) (Sep 03, 13 8:40) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (                table.mu[k] += delta/table.n[c]) p n
(215) # (                table.m2[k] += delta*\(float\(x\) - table.mu[k]\)) N
0 T (                if table.n[c] > 1:) N
0 T (                    table.sd[k] = \(table.m2[k]/\(table.n[c] - 1\)\)**0.5) N
0 T (            c += 1 ) N
0 T (            ) N
(220) # (def klasses\(table\):) N
0 T (    "generate a set of tables based on different classes") N
0 T (    if len\(table.klass\) == 0:) N
0 T (        print "No labeled classes in the given data set") N
0 T (        return -1) N
(225) # (    # assume there is only one class feature in the data set) N
0 T (    data = table.data[table.klass[0]]) N
0 T (    classnames = []) N
0 T (    for s in data:) N
0 T (        if s not in classnames:) N
(230) # (            classnames.append\(s\)) N
0 T (    tables = klass1\(table, classnames, data\)) N
0 T (    tables['0'] = table) N
0 T (    tables['names'] = classnames) N
0 T (    return tables) N
(235) # (    ) N
0 T (def klass1\(table, classnames, data\):) N
0 T (    tables = {}) N
0 T (    for s in classnames:) N
0 T (        tables[s] = tablestr.Table\(\)) N
(240) # (        makeTable\(table.name, tables[s]\)) N
0 T (        for i in range\(len\(data\)\):) N
0 T (            if s == data[i]:) N
0 T (                a = []) N
0 T (                for j in range\(len\(table.order\)\):) N
(245) # (                    a.append\(table.data[j][i]\)) N
0 T (                addRow\(a, tables[s]\)) N
0 T (    return tables) N
0 T (=============================================================================== ) N
0 T (             ) N
0 T (File : <lib.py >) N
(250) # () N
0 T (def rowprint\(a\):) N
0 T (    "get a row with some format") N
0 T (    max = len\(a\)) N
0 T (    line = '') N
(255) # (    for j in range\(max\):) N
0 T (        line += \(a[j] + ','\).rjust\(15\)) N
0 T (    return line) N
0 T (=============================================================================== ) N
0 T (             ) N
0 T (File : <main.py>) N
(260) # () N
0 T (import reader) N
0 T (import tablestr) N
0 T (if __name__ == "__main__":         ) N
0 T (    filename = 'data/weather1.csv'   ) N
(265) # (    table = tablestr.Table\(\)             #create raw data structure) N
0 T (    reader.readcsv\(filename,table \)      #read the .csv data set) N
0 T (    f = '%4.2f'                          #set the formatting for the output) N
0 T (    filename = 'output/table1.txt'       #define output txt file ) N
0 T (    out = file\(filename, 'w'\)    ) N
(270) # (    tables = reader.klasses\(table\)) N
0 T (    tablestr.tableprint\(tables['0'], f\)) N
0 T (    tablestr.tableprint_txt\(tables['0'], out, "weather1.csv/Table['0']", f\)  ) N
0 T (    for h in tables['names']:) N
0 T (        tablestr.tableprint\(tables[h], f\)) N
(275) # (        tablestr.tableprint_txt\(tables[h], out, "weather1.csv/Table['"+h+"']", f) N
0 T (\)  ) N
0 T (===============================================================================) N
0 T (        ) N
0 T (3. CODE ILLUSTRATE) N
0 T (a. Tables are stored in a dictionary structure:) N
(280) # (   - tables = {'0':table1, 'yes':table2, 'no':table3, 'names':[...]}) N
0 T (   - keys are the classes'names) N
0 T (   - data are the objects of the predefined Table class) N
0 T (   - tables['0'] is the original read-in table) N
(CS573:proj1b:Creating Tables_XUE YANG) (Page 4/5) (Sep 03, 13 8:40) title
border
grestore
(Printed by Xue Yang) rhead
(report.txt) (2/3) (Tuesday September 03, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (   - tables['yes'] and tables['no'] are the splited tables based on different cl) p n
0 T (asses) N
(285) # (   - tables['names'] is the list structure that indicates all the types for the ) N
0 T (dependent variable) N
0 T () N
0 T (b. Generated tables can be printed on both screen or indicated txt file) N
0 T () N
0 T () N
(290) # (   ) N
0 T () N
0 T () N
(CS573:proj1b:Creating Tables_XUE YANG) (Page 5/5) (Sep 03, 13 8:40) title
border
grestore
(Printed by Xue Yang) rhead
(report.txt) (3/3) (Tuesday September 03, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
